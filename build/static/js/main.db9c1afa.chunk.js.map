{"version":3,"sources":["data/clients.js","components/ClientDropdown.js","components/ClientConfig.js","data/clientConfigData.js","components/BuzzerUI.js","data/query.js","serviceWorker.js","index.js"],"names":["clients","key","text","value","ClientDropdown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","react_default","a","createElement","Dropdown","className","name","compact","placeholder","onChange","e","_ref","props","onClientChange","fluid","selection","options","clientData","Component","ClientConfig","config","keys","map","input","Input","onConfigChange","_ref2","_ref3","split","clientConfigData","live_site","title","icon","slack","channels","at_channel","at_here","twilio","numbers","groups","twitter","_","BuzzerUI","client","onDataChange","bind","assertThisInitialized","close","Header","as","components_ClientDropdown","setState","message","components_ClientConfig","Button","content","onClick","onSendNotification","Confirm","open","onCancel","onConfirm","plugins","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","query","variables","defineProperty","objectSpread","then","r","json","data","console","log","_this3","prev","Boolean","window","location","hostname","match","ReactDOM","render","components_BuzzerUI","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db9c1afa.chunk.js","sourcesContent":["export default [\n    {\n        key: \"0\",\n        text: \"Live Site\",\n        value: \"live_site\"\n    },\n    {\n        key: \"1\",\n        text: \"Twitter\",\n        value: \"twitter\"\n    },\n    {\n        key: \"2\",\n        text: \"Twilio\",\n        value: \"twilio\"\n    },\n    {\n        key: \"3\",\n        text: \"Slack\",\n        value: \"slack\"\n    }\n]\n","import React, { Component } from 'react';\nimport { Dropdown } from 'semantic-ui-react'\nimport clientData from '../data/clients'\nimport './css/ClientConfig.css';\nclass ClientDropdown extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t};\n\t};\n\trender() {\n        return (<Dropdown\n            className=\"dropdownCustom\"\n            name=\"droppy\"\n            compact\n            placeholder='Select Client'\n            onChange={(e,{value})=>this.props.onClientChange(value)}\n            fluid\n            selection\n            options={clientData}\n        />)\n\t};\n};\n\nexport default ClientDropdown;\n","import React, { Component } from 'react';\nimport { Dropdown, Input, Grid } from 'semantic-ui-react'\nimport clientData from '../data/clients'\nimport './css/ClientConfig.css';\nclass ClientConfig extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t};\n\t};\n\trender() {\n        let config = this.props.config\n        let configUI = Object.keys(this.props.config).map(input => {\n            switch(config[input]) {\n                case \"string\":\n                    return (\n                            <Input className=\"inputCustom\" placeholder={input}\n                                onChange={(e,{value})=>this.props.onConfigChange(value, input)}/>\n                    )\n                    break;\n                case \"boolean\":\n                    return (\n                        <Dropdown\n                            placeholder= {\"\" + input}\n                            className=\"dropdownCustom\"\n                            compact\n                            fluid\n                            selection\n                            options={[\n                                {\n                                    key: \"0\",\n                                    text: \"True\",\n                                    value: true\n                                },\n                                {\n                                    key: \"1\",\n                                    text: \"False\",\n                                    value: false\n                                }\n                            ]}\n                            onChange={(e,{value})=>this.props.onConfigChange(value, input)}\n                        />\n                    )\n                case \"string-array\":\n                    return  (\n                        <Input className=\"inputCustom\"\n                            placeholder={\"Input all \" + input}\n                            onChange={(e,{value})=>this.props.onConfigChange(value.split(\",\"), input)}/>\n                    )\n                    break;\n\n            }\n        })\n        return (configUI)\n\t};\n};\n\nexport default ClientConfig;\n","export default {\n    live_site: {\n        title: \"string\",\n        icon: \"string\"\n    },\n    slack: {\n        channels: \"string-array\",\n        at_channel: \"boolean\",\n        at_here: \"boolean\"\n    },\n    twilio: {\n        numbers: \"string-array\",\n        groups: \"string-array\"\n    },\n    twitter: {\n        _: \"boolean\"\n    }\n}\n","import React, { Component } from 'react';\nimport ClientDropdown from './ClientDropdown';\nimport ClientConfig from './ClientConfig';\nimport clientConfigData from '../data/clientConfigData'\nimport sendNotification from '../data/query.js'\nimport { Button, Grid, Input, Confirm, Header } from 'semantic-ui-react'\nimport './css/index.css';\n\nclass BuzzerUI extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tclient: \"\"\n\t\t};\n        this.onDataChange = this.onDataChange.bind(this)\n        this.onConfigChange = this.onConfigChange.bind(this)\n        this.close = this.close.bind(this)\n\t};\n\n\trender() {\n        return (\n            <div>\n                <br/>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <Header as='h1'>Buzzer UI</Header>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <ClientDropdown onClientChange={(value) => {\n                                this.setState({\n                                    client: value\n                                })\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <Input className=\"inputCustom\"\n                            placeholder={\"Message\"}\n                            onChange={(e,{value})=>this.setState({\n                                message: value\n                            })}/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"column\">\n                    <ClientConfig config={clientConfigData[this.state.client] || {}}\n                    onConfigChange={this.onConfigChange}\n                    />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <Button content=\"Submit\" onClick={(e,{value}) => this.onSendNotification()}/>\n                    </div>\n\n                </div>\n                <div className=\"row\">\n                    <div className=\"column\">\n                        <Confirm\n                            open={this.state.open}\n                            onCancel={this.close}\n                            onConfirm={this.close}\n                            content={\"Message: \\\"\" + this.state.message\n                                    + \"\\\" sent to \" + this.state.client}\n                            />\n                    </div>\n                </div>\n            </div>\n        )\n    };\n\n    close() {\n        this.setState({\n            open: false\n        })\n    }\n    onSendNotification() {\n        let response = sendNotification(this.state.message, this.state.client, this.state[this.state.client])\n        this.setState({\n            open: true\n        })\n    }\n    onDataChange(value, key) {\n        this.setState({\n            [key]: value\n        })\n    }\n\n    onConfigChange(value, key) {\n        console.log(value, key)\n        this.setState(prev => ({\n            [this.state.client]: {\n                ...prev[this.state.client],\n                [key]: value\n            }\n        }))\n    }\n\n};\n\n\nexport default BuzzerUI;\n","var queryMessage = `query send_message($message:String!, $plugins:PluginMaster!) {\n  send_message(message: $message, plugins: $plugins) {\n    plugin\n    errors {\n      error\n      message\n    }\n  }\n}`;\n\nexport default (message, client, plugins) => {\n    return fetch('http://0.0.0.0:8080/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': `application/json`,\n                'Accept'      : `application/json`\n            },\n            body: JSON.stringify({\n                query: queryMessage,\n                variables: {\n                    \"message\": message,\n                    \"plugins\": {\n                        [client]: {\n                            ...plugins\n                        }\n                    }\n                }\n            })\n        }).then(r =>\n            r.json()\n        ).then(data => {\n            console.log(\"Success!\", data)\n            return true;\n        })\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BuzzerUI from './components/BuzzerUI';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BuzzerUI />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}